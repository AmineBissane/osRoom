services:

  gestion-nap:
    build:
      context: ./gestion-nap
      dockerfile: Dockerfile
    container_name: gestion-nap
    ports:
      - "8226:8226"
    depends_on:
       discovery:
          condition: service_healthy
       config-server:
          condition: service_healthy
       postgresql:
          condition: service_healthy
       keycloak:
          condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresql:5432/gestion_nap
      - SPRING_DATASOURCE_USERNAME=alibou
      - SPRING_DATASOURCE_PASSWORD=alibou
      - EUREKA_CLIENT_SERVICE-URL_DEFAULTZONE=http://discovery:8761/eureka/
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8888
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_REALM=osRoom
      - KEYCLOAK_CLIENT_ID=gestion-nap
      - KEYCLOAK_CLIENT_SECRET=secret
      - LOGGING_LEVEL_COM_OSROOM_GESTIONNAP=DEBUG
      - LOGGING_LEVEL_FEIGN=DEBUG
      - LOGGING_LEVEL_ORG_HIBERNATE_SQL=DEBUG
      - SERVER_ERROR_INCLUDE-STACKTRACE=always
    networks:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8226/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  apptest:
    build:
      context: ./apptest
      dockerfile: Dockerfile
    container_name: apptest
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_KEYCLOAK_URL=http://keycloak:8080
      - NEXT_PUBLIC_KEYCLOAK_REALM=osRoom
      - NEXT_PUBLIC_KEYCLOAK_CLIENT_ID=frontend
      - NEXT_PUBLIC_API_URL=http://gateway:8222
    depends_on:
      - keycloak
      - gateway
    networks:
      - postgres
    restart: unless-stopped

  livekit:
    image: livekit/livekit-server
    ports:
      - "7880:7880"
      - "7881:7881"
      - "7882:7882/udp"
    environment:
      - "LIVEKIT_KEYS=devkey: secret"


  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    networks:
      - postgres
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8888/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10


  discovery:
    build:
      context: ./discovery
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - postgres
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 10
    depends_on:
      config-server:
        condition: service_healthy


  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "8222:8222"
    environment:
      - SPRING_ZIPKIN_BASE-URL=http://zipkin:9411
    networks:
      - postgres
    depends_on:
      discovery:
        condition: service_healthy
      config-server:
        condition: service_healthy

  student:
    build:
      context: ./student
      dockerfile: Dockerfile
    ports:
      - "8090:8090"
    networks:
      - postgres
    depends_on:
      discovery:
        condition: service_healthy
      config-server:
        condition: service_healthy

  classrooms:
    build:
      context: ./classrooms
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    networks:
      - postgres
    depends_on:
      discovery:
        condition: service_healthy
      config-server:
        condition: service_healthy

  activities:
    build:
      context: ./activities
      dockerfile: Dockerfile
    ports:
      - "8010:8010"
    networks:
      - postgres
    depends_on:
      discovery:
        condition: service_healthy
      config-server:
        condition: service_healthy


  activitiesresponses:
    build:
      context: ./activitiesresponses
      dockerfile: Dockerfile
    ports:
      - "8020:8020"
    networks:
      - postgres
    depends_on:
      discovery:
        condition: service_healthy
      config-server:
        condition: service_healthy

  file-storage:
    build:
      context: ./file-storage
      dockerfile: Dockerfile
    ports:
      - "8030:8030"
    networks:
      - postgres
    depends_on:
      discovery:
        condition: service_healthy
      config-server:
        condition: service_healthy
    volumes:
      - file-storage-data:/data/attachments
    command: >
      bash -c "
        chmod -R 777 /data/attachments && 
        java org.springframework.boot.loader.JarLauncher
      "

  school:
    build:
      context: ./school
      dockerfile: Dockerfile
    ports:
      - "8070:8070"
    networks:
      - postgres
    depends_on:
      discovery:
        condition: service_healthy
      config-server:
        condition: service_healthy

  postgresql:
    container_name: postgresql
    image: postgres
    environment:
      POSTGRES_USER: alibou
      POSTGRES_PASSWORD: alibou
      PGDATA: /data/postgres
      POSTGRES_DB: keycloak
    volumes:
      - postgres:/data/postgres
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U alibou"]
      interval: 5s
      timeout: 5s
      retries: 5

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - postgres
    restart: unless-stopped
    depends_on:
      - postgresql

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - postgres
    restart: unless-stopped

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:24.0.3
    command: start-dev
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgresql:5432/keycloak
      KC_DB_USERNAME: alibou
      KC_DB_PASSWORD: alibou
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      QUARKUS_TRANSACTION_MANAGER_ENABLE_RECOVERY: "true"
    ports:
      - "8080:8080"
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
      - postgres
    restart: unless-stopped

networks:
  postgres:
    driver: bridge
  zipkin:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  file-storage-data: