services:

  gestion-nap:
    build:
      context: ./gestion-nap
      dockerfile: Dockerfile
    container_name: gestion-nap
    ports:
      - "8226:8226"
    depends_on:
      discovery:
        condition: service_healthy
      config-server:
        condition: service_healthy
      postgresql:
        condition: service_healthy
      keycloak:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresql:5432/gestion_nap
      - SPRING_DATASOURCE_USERNAME=alibou
      - SPRING_DATASOURCE_PASSWORD=alibou
      - EUREKA_CLIENT_SERVICE-URL_DEFAULTZONE=http://discovery:8761/eureka/
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8888
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_REALM=osRoom
      - KEYCLOAK_CLIENT_ID=gestion-nap
      - KEYCLOAK_CLIENT_SECRET=secret
      - LOGGING_LEVEL_COM_OSROOM_GESTIONNAP=DEBUG
      - LOGGING_LEVEL_FEIGN=DEBUG
      - LOGGING_LEVEL_ORG_HIBERNATE_SQL=DEBUG
      - SERVER_ERROR_INCLUDE-STACKTRACE=always
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
    networks:
      - postgres
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8226/actuator/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  livekit:
    image: livekit/livekit-server
    ports:
      - "7880:7880"
      - "7881:7881"
      - "7882:7882/udp"
    environment:
      - "LIVEKIT_KEYS=devkey: Xj93YhGq7vLZPtb9KsWnAeM8rqFYgTEq"
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    environment:
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
    networks:
      - postgres
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8888/actuator/health || exit 1" ]
      interval: 15s
      timeout: 10s
      retries: 15
      start_period: 60s

  discovery:
    build:
      context: ./discovery
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    environment:
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
    networks:
      - postgres
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 15s
      timeout: 10s
      retries: 15
      start_period: 60s
    depends_on:
      config-server:
        condition: service_healthy

  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "8222:8222"
    environment:
      - SPRING_ZIPKIN_BASE-URL=http://zipkin:9411
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
    networks:
      - postgres
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8222/actuator/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    depends_on:
      discovery:
        condition: service_healthy
      config-server:
        condition: service_healthy

  student:
    build:
      context: ./student
      dockerfile: Dockerfile
    ports:
      - "8090:8090"
    environment:
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
    networks:
      - postgres
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/actuator/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    depends_on:
      discovery:
        condition: service_healthy
      config-server:
        condition: service_healthy

  classrooms:
    build:
      context: ./classrooms
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
    networks:
      - postgres
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/actuator/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    depends_on:
      discovery:
        condition: service_healthy
      config-server:
        condition: service_healthy

  activities:
    build:
      context: ./activities
      dockerfile: Dockerfile
    ports:
      - "8010:8010"
    environment:
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
    networks:
      - postgres
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/actuator/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    depends_on:
      discovery:
        condition: service_healthy
      config-server:
        condition: service_healthy

  activitiesresponses:
    build:
      context: ./activitiesresponses
      dockerfile: Dockerfile
    ports:
      - "8020:8020"
    environment:
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
    networks:
      - postgres
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8020/actuator/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    depends_on:
      discovery:
        condition: service_healthy
      config-server:
        condition: service_healthy

  file-storage:
    build:
      context: ./file-storage
      dockerfile: Dockerfile
    ports:
      - "8030:8030"
    environment:
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
    networks:
      - postgres
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8030/actuator/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    depends_on:
      discovery:
        condition: service_healthy
      config-server:
        condition: service_healthy
    volumes:
      - file-storage-data:/data/attachments
    command: >
      bash -c "
        chmod -R 777 /data/attachments && 
        java org.springframework.boot.loader.JarLauncher
      "

  school:
    build:
      context: ./school
      dockerfile: Dockerfile
    ports:
      - "8070:8070"
    environment:
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
    networks:
      - postgres
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8070/actuator/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    depends_on:
      discovery:
        condition: service_healthy
      config-server:
        condition: service_healthy

  postgresql:
    container_name: postgresql
    image: postgres
    environment:
      POSTGRES_USER: alibou
      POSTGRES_PASSWORD: alibou
      PGDATA: /data/postgres
      POSTGRES_DB: keycloak
    volumes:
      - postgres:/data/postgres
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U alibou"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - postgres
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
    depends_on:
      postgresql:
        condition: service_healthy

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - postgres
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:24.0.3
    command: start-dev
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgresql:5432/keycloak
      KC_DB_USERNAME: alibou
      KC_DB_PASSWORD: alibou
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      QUARKUS_TRANSACTION_MANAGER_ENABLE_RECOVERY: "true"
      KC_PROXY: edge
      KC_HOSTNAME: 82.29.168.17
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT: "false"
      KC_HTTP_ENABLED: "true"
    ports:
      - "8080:8080"
    networks:
      - postgres
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    depends_on:
      postgresql:
        condition: service_healthy

  # Node exporter to collect host metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'

  # cAdvisor to collect container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8081:8080"
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

  # Prometheus for metrics collection and storagee
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - postgres
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    depends_on:
      - cadvisor
      - node-exporter

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3002:3000"
    networks:
      - postgres
      - monitoring
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
    depends_on:
      - prometheus

networks:
  postgres:
    driver: bridge
  zipkin:
    driver: bridge
  monitoring:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  file-storage-data:
  prometheus_data:
  grafana_data: